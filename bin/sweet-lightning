#!/usr/bin/env node

const program = require('commander')
const fs = require('fs')
const path = require('path')
const { parse } = require('url')
const next = require('next')
const express = require('express')
const { SubscriptionServer } = require('subscriptions-transport-ws')
const { makeExecutableSchema } = require('graphql-tools')
const expressPlayground = require('graphql-playground-middleware-express').default
const { graphqlExpress } = require('apollo-server-express')
const { execute, subscribe } = require('graphql')
const bodyParser = require('body-parser')
const cors = require('cors')
const grpc = require('grpc')
const { PubSub } = require('graphql-subscriptions')
const createResolvers = require('../api/resolvers')
const { createServer, isSecure } = require('../lib/create-server')

program
  .version('1.0.0', '-v, --version')
  .description('Buy candy with Bitcoin Lightning')
  .option('--lnd.macaroon [base64|path]', 'Base64 encoded string or path to macaroon', process.env.LND_MACAROON || '/root/.lnd/invoice.macaroon')
  .option('--lnd.rpccert [base64|path]', 'Base64 encoded string or path to TLS certificate for lnd\'s RPC services', process.env.LND_RPC_CERT || '/root/.lnd/tls.cert')
  .option('--lnd.rpcserver [server]', 'Interface/port to lnd\'s RPC services', process.env.LND_RPC_SERVER || 'localhost:10009')
  .option('--tls.certpath [path]', process.env.TLS_CERT_PATH || 'Path to TLS certificate')
  .option('--tls.keypath [path]', process.env.TLS_KEY_PATH || 'Path to TLS key')
  .option('--listen [server]', 'Interface/port to the web app', process.env.LISTEN || `0.0.0.0:${process.env.PORT || '3000'}`)
  .option('--externalurl [url]', 'External url to the web app', process.env.EXTERNAL_URL || `http://localhost:${process.env.PORT || '3000'}`)
  .option('--footer [text]', 'Footer text', process.env.FOOTER || 'the.lightning.land')
  .option('--footer.url [url]', 'Footer url', process.env.FOOTER_URL || 'https://the.lightning.land')
  .option('--memo.template [text]', 'Template of invoice memo. Use the placeholder $amt for the amount in satoshis.', process.env.MEMO_TEMPLATE || 'Candy for $amt sat')
  .parse(process.argv)

let lndMacaroon

try {
  // try to get macaroon from path
  lndMacaroon = fs.readFileSync(program['lnd.macaroon']).toString('hex')
} catch (err) {
  // it's probably a base64 encoded string then
  lndMacaroon = Buffer.from(program['lnd.macaroon'], 'base64').toString('hex')
}

let lndCert

try {
  // try to get certificate from path
  lndCert = fs.readFileSync(program['lnd.rpccert'])
} catch (err) {
  // it's probably a base64 encoded string then
  lndCert = Buffer.from(program['lnd.rpccert'], 'base64')
}

const credentials = grpc.credentials.createSsl(lndCert)

const { lnrpc } = grpc.load('lnd.proto')
const lightning = new lnrpc.Lightning(program['lnd.rpcserver'], credentials)

const [
  listenHost = 'localhost',
  listenPort = 3000,
] = program['listen'].split(':') || []

const {
  protocol: externalProtocol = 'http:',
  hostname: externalHost = 'localhost',
  port: externalPort = 3000,
  pathname: externalPath = '/',
} = program['externalurl'] ? new URL(program['externalurl']) : {}

const externalWsProtocol = externalProtocol.replace('http', 'ws')
const externalPortWithColon = externalPort ? `:${externalPort}` : ''
const basePath = externalPath !== '/' ? externalPath : ''

// needed for handshake with lnd grpc server
process.env.GRPC_SSL_CIPHER_SUITES = 'ECDHE-ECDSA-AES128-GCM-SHA256'

const dev = process.env.NODE_ENV !== 'production'
const nextDir = path.join(__dirname, '..')
const app = next({
  dev,
  dir: nextDir,
  conf: {
    assetPrefix: `${basePath}/`,
    serverRuntimeConfig: {
      graphqlUri: `http://localhost:${listenPort}/graphql`, // TODO: secure protocol
    },
    publicRuntimeConfig: {
      basePath,
      graphqlUri: `${externalProtocol}//${externalHost}${externalPortWithColon}${basePath}/graphql`,
      subscriptionUri: `${externalWsProtocol}//${externalHost}${externalPortWithColon}${basePath}/graphql`,
      footer: program['footer'],
      footerUrl: program['footer.url'],
    },
  },
})
const handle = app.getRequestHandler()

const pubsub = new PubSub()

const meta = new grpc.Metadata();
meta.add('macaroon', lndMacaroon);

function subscribeToInvoices() {
  let call = lightning.subscribeInvoices({}, meta);
  call
    .on('data', (invoice) => pubsub.publish('invoicePaid', ({ invoice })))
    .on('end', () => {
      console.info(`Subscription closed`)
      console.info(`Subscribing again in 5s`)
      setTimeout(() => subscribeToInvoices(), 5000)
    })
    .on('error', (err) => {
      console.error(`Subscription failed`, err.message)
      console.info(`Subscribing again in 5s`)
      setTimeout(() => subscribeToInvoices(), 5000)
    })
}

subscribeToInvoices()

const typeDefsPath = path.join(nextDir, 'schema.graphqls')
const typeDefs = fs.readFileSync(typeDefsPath, 'utf8')
const createMemo = (amount) => {
  const memoTemplate = program['memo.template'];
  return memoTemplate.replace(/\$amt/g, `${amount}`);
};

app.prepare().then(() => {
  const schema = makeExecutableSchema({
    typeDefs,
    resolvers: createResolvers({ pubsub, lightning }),
  })

  const app = express()

  app.use(cors())

  app.use('/graphql', bodyParser.json(), graphqlExpress({
    schema,
    context: {
      macaroon: lndMacaroon,
      createMemo,
    },
  }))

  app.use('/playground', expressPlayground({
    endpoint: `${externalProtocol}//${externalHost}${externalPortWithColon}${basePath}/graphql`,
    subscriptionEndpoint: `${externalWsProtocol}//${externalHost}${externalPortWithColon}${basePath}/graphql`,
  }))

  app.get('*', (req, res) => {
    return handle(req, res)
  })

  const server = createServer(app, {
    certPath: program['tls.certpath'],
    keyPath: program['tls.keypath'],
  })

  server.listen(listenPort, listenHost, (err) => {
    if (err) throw err

    const proto = {
      http: isSecure(server) ? 'https' : 'http',
      ws: isSecure(server) ? 'wss' : 'ws',
    };

    console.info(`Next server listening on ${proto.http}://${listenHost}:${listenPort}`)
    console.info(`GraphQL server listening on ${proto.http}://${listenHost}:${listenPort}/graphql`)
    console.info(`Subscriptions listening on ${proto.ws}://${listenHost}:${listenPort}/graphql`)
    console.info(`External URL is ${externalProtocol}//${externalHost}${externalPortWithColon}${basePath}`)
    console.info(`Test API with ${externalProtocol}//${externalHost}${externalPortWithColon}/playground`)

    new SubscriptionServer({ execute, subscribe, schema }, {
      server,
      path: '/graphql',
    })
  })
})

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', reason.stack || reason)
})
